// Copyright (c) 2025 古川幸樹
// このソースコードは自由に使用、複製、改変、再配布することができます。
// ただし、著作権表示は削除しないでください。 

import { NextRequest, NextResponse } from 'next/server';

export async function POST(req: NextRequest) {
    try {
        const body = await req.json();
        const { commissionID, userID, answer } = body;

        if (!commissionID || !userID || !answer) {
            return NextResponse.json(
                { error: 'Missing required fields: commissionID, userID, or answer' },
                { status: 400 }
            );
        }

        // Prepare data for the external API
        // The external API expects fields: commissionID, userId, answer.
        // id and created_at are likely generated by the FastAPI backend.
        const externalApiPayload = {
            commissionID: commissionID, // Matches FastAPI model
            userId: userID,       // Map Next.js userID to FastAPI userId
            answer: answer,       // Matches FastAPI model, already a JSON string
            created_at: Date.now(), // Assuming FastAPI expects ISO string for created_at
            id: `${userID}_${commissionID}` // Combined ID as per your interface
        };
        
        console.log('Forwarding to external API /upload_answer/:', externalApiPayload);

        const externalResponse = await fetch('https://st-kdaz.onrender.com/upload_answer/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(externalApiPayload),
        });

        if (!externalResponse.ok) {
            const errorText = await externalResponse.text();
            console.error('External API error (/upload_answer/):', errorText);
            return NextResponse.json(
                { error: 'External API failed to upload answer', details: errorText },
                { status: externalResponse.status }
            );
        }

        const responseData = await externalResponse.json();
        return NextResponse.json(responseData, { status: 200 });

    } catch (error) {
        console.error('API route error (submitanswer):', error);
        const errorMessage = error instanceof Error ? error.message : 'Unknown server error';
        return NextResponse.json(
            { error: 'Internal server error while submitting answer', details: errorMessage },
            { status: 500 }
        );
    }
}
